class LazyLoader{constructor(){this.images = [];this.observer = null;this.options ={root:null,rootMargin:'50px',threshold:0.01};}init(){if(!('IntersectionObserver' in window)){this.loadAllImages();return;}this.observer = new IntersectionObserver(this.handleIntersection.bind(this),this.options);this.images = document.querySelectorAll('img[data-src]');this.images.forEach(img =>{this.observer.observe(img);img.classList.add('lazy-loading');});}handleIntersection(entries){entries.forEach(entry =>{if(entry.isIntersecting){this.loadImage(entry.target);}});}loadImage(img){const src = img.dataset.src;const srcset = img.dataset.srcset;if(!src)return;const tempImg = new Image();tempImg.onload =()=>{img.src = src;if(srcset){img.srcset = srcset;}img.classList.remove('lazy-loading');img.classList.add('lazy-loaded');delete img.dataset.src;if(srcset)delete img.dataset.srcset;if(this.observer){this.observer.unobserve(img);}};tempImg.onerror =()=>{console.error(`Failed to load image:${src}`);img.classList.remove('lazy-loading');img.classList.add('lazy-error');if(this.observer){this.observer.unobserve(img);}};tempImg.src = src;}loadAllImages(){const images = document.querySelectorAll('img[data-src]');images.forEach(img =>{const src = img.dataset.src;const srcset = img.dataset.srcset;if(src){img.src = src;delete img.dataset.src;}if(srcset){img.srcset = srcset;delete img.dataset.srcset;}});}loadImageNow(img){if(img.dataset.src){this.loadImage(img);}}destroy(){if(this.observer){this.observer.disconnect();this.observer = null;}}}if(typeof module !== 'undefined' && module.exports){module.exports = LazyLoader;}