class I18nManager{constructor(){if(I18nManager.instance){return I18nManager.instance;}I18nManager.instance = this;this.currentLang = null;this.translations ={};this.supportedLanguages = ['pt-BR','en-US','es-ES'];this.defaultLanguage = 'pt-BR';this.observers = [];}async init(){try{const detectedLang = this.detectLanguage();await this.setLanguage(detectedLang);return true;}catch(error){console.error('Failed to initialize i18n:',error);await this.setLanguage(this.defaultLanguage);return false;}}detectLanguage(){const savedLang = localStorage.getItem('preferredLanguage');if(savedLang && this.supportedLanguages.includes(savedLang)){return savedLang;}const browserLang = navigator.language || navigator.userLanguage;if(this.supportedLanguages.includes(browserLang)){return browserLang;}const langCode = browserLang.split('-')[0];const matchedLang = this.supportedLanguages.find(lang => lang.startsWith(langCode));return matchedLang || this.defaultLanguage;}async loadLanguage(lang){if(this.translations[lang]){return this.translations[lang];}try{const response = await fetch(`/locales/${lang}.json`);if(!response.ok){throw new Error(`Failed to load ${lang}.json:${response.status}`);}const translations = await response.json();this.translations[lang] = translations;return translations;}catch(error){console.error(`Error loading language file ${lang}:`,error);if(lang !== this.defaultLanguage && !this.translations[this.defaultLanguage]){console.log(`Falling back to default language:${this.defaultLanguage}`);return await this.loadLanguage(this.defaultLanguage);}throw error;}}async setLanguage(lang){if(!this.supportedLanguages.includes(lang)){console.warn(`Language ${lang}not supported,using default`);lang = this.defaultLanguage;}try{await this.loadLanguage(lang);const previousLang = this.currentLang;this.currentLang = lang;localStorage.setItem('preferredLanguage',lang);document.documentElement.lang = lang;this.applyTranslations();this.updateMetaTags();this.notifyObservers(lang,previousLang);this.announceLanguageChange(lang);return true;}catch(error){console.error(`Failed to set language to ${lang}:`,error);return false;}}translate(key,fallback = ''){if(!this.currentLang || !this.translations[this.currentLang]){return fallback || key;}const keys = key.split('.');let value = this.translations[this.currentLang];for(const k of keys){if(value && typeof value === 'object' && k in value){value = value[k];}else{if(this.currentLang !== this.defaultLanguage && this.translations[this.defaultLanguage]){let defaultValue = this.translations[this.defaultLanguage];for(const dk of keys){if(defaultValue && typeof defaultValue === 'object' && dk in defaultValue){defaultValue = defaultValue[dk];}else{return fallback || key;}}return defaultValue;}return fallback || key;}}return value;}applyTranslations(){const elements = document.querySelectorAll('[data-i18n]');elements.forEach(element =>{const key = element.getAttribute('data-i18n');const translation = this.translate(key);if(translation && translation !== key){const attr = element.getAttribute('data-i18n-attr');if(attr){element.setAttribute(attr,translation);}else{if(element.children.length === 0){element.textContent = translation;}else{const textNodes = Array.from(element.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);if(textNodes.length > 0){textNodes[0].textContent = translation;}}}}});}updateMetaTags(){const meta = this.translate('meta');if(meta && typeof meta === 'object'){if(meta.title){document.title = meta.title;}const descMeta = document.querySelector('meta[name="description"]');if(descMeta && meta.description){descMeta.setAttribute('content',meta.description);}const keywordsMeta = document.querySelector('meta[name="keywords"]');if(keywordsMeta && meta.keywords){keywordsMeta.setAttribute('content',meta.keywords);}const ogTitle = document.querySelector('meta[property="og:title"]');if(ogTitle && meta.title){ogTitle.setAttribute('content',meta.title);}const ogDesc = document.querySelector('meta[property="og:description"]');if(ogDesc && meta.description){ogDesc.setAttribute('content',meta.description);}}}subscribe(callback){this.observers.push(callback);}unsubscribe(callback){this.observers = this.observers.filter(obs => obs !== callback);}notifyObservers(newLang,oldLang){this.observers.forEach(callback =>{try{callback(newLang,oldLang);}catch(error){console.error('Error in i18n observer:',error);}});}getCurrentLanguage(){return this.currentLang;}getSupportedLanguages(){return [...this.supportedLanguages];}isLanguageSupported(lang){return this.supportedLanguages.includes(lang);}announceLanguageChange(lang){const langNames ={'pt-BR':'Português','en-US':'English','es-ES':'Español'};const liveRegion = document.getElementById('aria-live-region');if(liveRegion){liveRegion.textContent = `Language changed to ${langNames[lang] || lang}`;setTimeout(()=>{liveRegion.textContent = '';},1000);}}}const i18nManager = new I18nManager();